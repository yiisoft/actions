name: phpbench

on:
  workflow_call:
    inputs:
      coverage:
        description: Generate code coverage report.
        default: pcov
        required: false
        type: string
      composer-command:
        description: Composer command to run.
        default: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi
        required: false
        type: string
      extensions:
        description: List of extensions to PHP.
        default:
        required: false
        type: string
      ini-values:
        description: Initial values for PHP configuration.
        default: date.timezone='UTC'
        required: false
        type: string
      os:
        description: Os to test, separated by comma.
        required: true
        type: string
      php:
        description: PHP versions to test, separated by comma.
        required: true
        type: string
      tools:
        description: Tools to test, separated by comma.
        default: composer:v2
        required: false
        type: string
      report:
        description: Report name.
        default: default
        required: false
        type: string
      config-file:
        description: Config file name.
        default: phpbench.json
        required: false
        type: string
      tag-name:
        description: Tag name for baseline creation.
        required: false
        type: string
      ref-name:
        description: Baseline reference name (tag-name) to compare with.
        required: false
        type: string
      baseline-assertion:
        description: Baseline assertion function
        default: variant.mode <= baseline.mode +/- 5%
        required: false
        type: string

jobs:
  phpbench:
    name: PHP ${{ matrix.php }}-${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ${{ fromJson(inputs.os) }}
        php: ${{ fromJson(inputs.php) }}

    steps:
      - name: Checking the correctness of the configuration.
        run: |
          if [ -n "${{ inputs.tag-name }}" ] && [ -n "${{ inputs.ref-name }}" ]; then
            echo "Only one of tag-name or ref-name can be set in configuration."
            exit 1
          fi

      - name: Checkout.
        uses: actions/checkout@v4

      - name: Install PHP with extensions.
        uses: shivammathur/setup-php@v2
        with:
          coverage: ${{ inputs.coverage }}
          extensions: ${{ inputs.extensions }}
          ini-values: ${{ inputs.ini-values }}
          php-version: ${{ matrix.php }}
          tools: ${{ inputs.tools }}

      - name: Determine composer cache directory on Linux.
        if: matrix.os == 'ubuntu-latest'
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV

      - name: Determine composer cache directory on Windows.
        if: matrix.os == 'windows-latest'
        run: echo "COMPOSER_CACHE_DIR=~\AppData\Local\Composer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Cache dependencies installed with composer.
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php${{ matrix.php }}-composer-${{ hashFiles('composer.json') }}
          restore-keys: |
            php${{ matrix.php }}-composer-

      - name: Update composer.
        run: composer self-update

      - name: Install dependencies with composer.
        run: ${{ inputs.composer-command }}

      - name: Run phpbench.
        run: |
          args=""
          if [ -n "${{ inputs.tag-name }}" ]; then
            args="--tag=${{ inputs.tag-name }}"
          fi

          if [ -n "${{ inputs.ref-name }}" ]; then
            args="--ref=${{ inputs.ref-name }}"

            if [ -n "${{ inputs.baseline-assertion }}" ]; then
              args="$args --assert=${{ inputs.baseline-assertion }}"
            fi
          fi

          tagParameter="--tag=${{ inputs.tag-name }}"
          vendor/bin/phpbench run --report=${{ inputs.report }} --config=${{ inputs.config-file }} $args > phpbench.log

      - name: Add comment to PR based on exit code and output
        if: github.event_name == 'pull_request' && secrets.GITHUB_TOKEN != ''
        run: |
          output=$(cat command_output.txt)

          if [ "${{ steps.run_command.outcome }}" == "success" ]; then
            COMMENT="Benchmark completed successfully:\n\n\`\`\`\n$output\n\`\`\`"
          else
            COMMENT="Benchmark execution time difference is too big:\n\n\`\`\`\n$output\n\`\`\`"
          fi

          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
