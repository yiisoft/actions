name: phpbench

on:
  workflow_call:
    inputs:
      coverage:
        description: Generate code coverage report.
        default: pcov
        required: false
        type: string
      composer-command:
        description: Composer command to run.
        default: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi
        required: false
        type: string
      extensions:
        description: List of extensions to PHP.
        default:
        required: false
        type: string
      ini-values:
        description: Initial values for PHP configuration.
        default: date.timezone='UTC'
        required: false
        type: string
      os:
        description: Os to test, separated by comma.
        required: true
        type: string
      php:
        description: PHP versions to test, separated by comma.
        required: true
        type: string
      tools:
        description: Tools to test, separated by comma.
        default: composer:v2
        required: false
        type: string
      report:
        description: Report name.
        default: aggregate
        required: false
        type: string
      config-file:
        description: Config file name.
        default: phpbench.json
        required: false
        type: string
      tag-name:
        description: Tag name for baseline creation.
        required: false
        type: string
      ref-name:
        description: Baseline reference name (tag-name) to compare with.
        required: false
        type: string
      baseline-assertion:
        description: Baseline assertion function
        default: mode(variant.time.avg) <= mode(baseline.time.avg) +/- 5%
        required: false
        type: string
    secrets:
      token:
        description: GitHub classic token with PR commenting permission
        required: false

jobs:
  phpbench:
    name: PHP ${{ matrix.php }}-${{ matrix.os }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(inputs.os) }}
        php: ${{ fromJson(inputs.php) }}

    steps:
      - name: Install PHP with extensions.
        uses: shivammathur/setup-php@v2
        with:
          coverage: ${{ inputs.coverage }}
          extensions: ${{ inputs.extensions }}
          ini-values: ${{ inputs.ini-values }}
          php-version: ${{ matrix.php }}
          tools: ${{ inputs.tools }}

      - name: Checkout.
        uses: actions/checkout@v4
        with:
          path: ./current

      - name: Determine composer cache directory on Linux.
        if: matrix.os == 'ubuntu-latest'
        working-directory: current
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV

      - name: Determine composer cache directory on Windows.
        if: matrix.os == 'windows-latest'
        working-directory: current
        run: echo "COMPOSER_CACHE_DIR=~\AppData\Local\Composer" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Cache dependencies installed with composer.
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php${{ matrix.php }}-composer-${{ hashFiles('composer.json') }}
          restore-keys: |
            php${{ matrix.php }}-composer-

      - name: Update composer.
        run: composer self-update

      - name: Check if we need to create a baseline for a PR (Linux).
        if: matrix.os == 'ubuntu-latest'
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.ref }}" != "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
            echo "WITH_BENCH_BASELINE=1" >> $GITHUB_ENV
          else
            echo "WITH_BENCH_BASELINE=0" >> $GITHUB_ENV
          fi

      - name: Check if we need to create a baseline for a PR (Windows).
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          if (("${{ github.event_name }}" -eq "pull_request") -and ("${{ github.ref }}" -ne "refs/heads/${{ github.event.repository.default_branch }}")) {
            Set-Content -Path $env:GITHUB_ENV -Value "WITH_BENCH_BASELINE=1" -NoNewline
          } else {
            Set-Content -Path $env:GITHUB_ENV -Value "WITH_BENCH_BASELINE=0" -NoNewline
          }

      - name: "Baseline creation: Checkout default branch."
        uses: actions/checkout@v4
        if: ${{ env.WITH_BENCH_BASELINE == '1' }}
        with:
          path: default
          ref: ${{ github.event.repository.default_branch }}

      - name: "Baseline creation: Install dependencies with composer."
        if: ${{ env.WITH_BENCH_BASELINE == '1' }}
        run: ${{ inputs.composer-command }}
        working-directory: default

      - name: "Baseline creation: Run PhpBench."
        if: ${{ env.WITH_BENCH_BASELINE == '1' }}
        run: vendor/bin/phpbench run --report='${{ inputs.report }}' --config=${{ inputs.config-file }} --tag=default
        working-directory: default

      - name: Install dependencies with composer.
        run: ${{ inputs.composer-command }}
        working-directory: ./current

      - name: Copy PhpBench baseline data (Linux).
        if: ${{ env.WITH_BENCH_BASELINE == '1' && matrix.os == 'ubuntu-latest' }}
        run: cp -r default/.phpbench current/

      - name: Copy PhpBench baseline data (Windows).
        if: ${{ env.WITH_BENCH_BASELINE == '1' && matrix.os == 'windows-latest' }}
        shell: pwsh
        run: Copy-Item -Path default/.phpbench -Destination current -Recurse

      - name: "Run PhpBench (Linux)."
        if: matrix.os == 'ubuntu-latest'
        working-directory: ./current
        continue-on-error: true
        run: |
          if [ "${{ env.WITH_BENCH_BASELINE }}" == '1' ]; then
            vendor/bin/phpbench run --report='${{ inputs.report }}' --config=${{ inputs.config-file }} --ref=default --assert="${{ inputs.baseline-assertion }}" > phpbench.log
          else
            vendor/bin/phpbench run --report='${{ inputs.report }}' --config=${{ inputs.config-file }} > phpbench.log
          fi

          exit_code=$?
          echo "EXIT_CODE=$exit_code" >> $GITHUB_ENV
          exit $exit_code

      - name: "Run PhpBench (Windows)."
        if: matrix.os == 'windows-latest'
        shell: pwsh
        working-directory: ./current
        run: |
          if (${{ env.WITH_BENCH_BASELINE }} -eq '1') {
            & php vendor/bin/phpbench run --report='${{ inputs.report }}' --config=${{ inputs.config-file }} --assert="${{ inputs.baseline-assertion }}" --ref=default | Out-File -FilePath phpbench.log -Encoding utf8
          } else {
            & php vendor/bin/phpbench run --report='${{ inputs.report }}' --config=${{ inputs.config-file }} | Out-File -FilePath phpbench.log -Encoding utf8
          }

          $exitCode = $LASTEXITCODE
          echo "EXIT_CODE=$exitCode" >> $GITHUB_ENV
          exit $exitCode

      - name: Set up token to environment variable
        if: always()
        run: echo "TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Add comment to PR.
        if: always() && github.event_name == 'pull_request' && env.TOKEN != ''
        uses: mshick/add-pr-comment@v2
        with:
          preformatted: true
          message-path: current/phpbench.log
          repo-token: ${{ secrets.token }}

      - name: Fail if PhpBench failed.
        if: always()
        run: exit 1
